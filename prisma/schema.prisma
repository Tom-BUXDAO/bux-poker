generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id              String             @id @default(cuid())
  discordId       String             @unique
  discordUsername String
  avatarUrl       String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  gameStates      PlayerGameState[]  @relation("PlayerToGameState")
  registrations   TournamentPlayer[]

  @@map("players")
}

model Tournament {
  id          String             @id
  name        String
  status      TournamentStatus
  maxPlayers  Int
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  tables      Table[]
  players     TournamentPlayer[]

  @@map("tournaments")
}

model TournamentPlayer {
  id           String     @id @default(cuid())
  tournamentId String
  playerId     String
  registeredAt DateTime   @default(now())
  player       Player     @relation(fields: [playerId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, playerId])
  @@map("tournament_players")
}

model Table {
  id            String            @id
  tournamentId  String
  status        TableStatus
  smallBlind    Int
  bigBlind      Int
  currentRound  Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  tournament    Tournament       @relation(fields: [tournamentId], references: [id])
  gameState     GameState?
  playerStates  PlayerGameState[]

  @@index([tournamentId])
  @@map("tables")
}

model GameState {
  id             String   @id @default(cuid())
  tableId        String   @unique
  currentHand    Json?
  deck           Json?
  pot            Int      @default(0)
  communityCards Json?
  currentPosition Int?
  table          Table    @relation(fields: [tableId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([tableId])
  @@map("game_states")
}

model PlayerGameState {
  id            String   @id @default(cuid())
  tableId       String
  playerId      String
  position      Int
  chips         Int     @default(1000)
  cards         Json?
  isActive      Boolean @default(true)
  lastAction    String?
  lastActionTime DateTime?
  table         Table    @relation(fields: [tableId], references: [id])
  player        Player   @relation("PlayerToGameState", fields: [playerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tableId, playerId])
  @@index([tableId])
  @@index([playerId])
  @@map("player_game_states")
}

enum TournamentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TableStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}
